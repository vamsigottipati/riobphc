import { IBounds } from './types';
export declare function mapValues<T, P>(collection: {
    [key: string]: T;
}, iteratee: (item: T, key: string, collection: {
    [key: string]: T;
}) => P): {
    [key: string]: P;
};
export declare function mapTwoValues(a: any, b: any, iteratee: any): {};
export declare function matrixTranslate(x: any, y: any): any;
export declare function matrixScale(x: any, y: any): any;
export declare function matrixMultiply(...matrices: any[]): any;
export declare function styleValue(prop: string, value: string | number | undefined): string | number | undefined;
export declare function getStaggerDelay(index: number, stagger: number | ((index: number) => number)): number;
export declare const identity: <T>(arg: T) => T;
export declare const noop: () => void;
export declare const rect: (element: Element) => IBounds;
export declare function isVisible(element: Element): boolean;
export declare function getDelta(a: IBounds, b: IBounds): IBounds;
export declare const deltaChanged: (delta: IBounds) => boolean;
export declare const boundsChanged: (a: IBounds, b: IBounds) => boolean;
declare type EventHandler = (event?: any) => void;
export declare function mitt(): {
    /**
     * Register an event handler for the given type.
     *
     * @param  {String} type	Type of event to listen for, or `"*"` for all events
     * @param  {Function} handler Function to call in response to given event
     * @memberOf mitt
     */
    on(type: string, handler: EventHandler): void;
    /**
     * Remove an event handler for the given type.
     *
     * @param  {String} type	Type of event to unregister `handler` from, or `"*"`
     * @param  {Function} handler Handler function to remove
     * @memberOf mitt
     */
    off(type: string, handler: EventHandler): void;
    /**
     * Invoke all handlers for the given type.
     * If present, `"*"` handlers are invoked after type-matched handlers.
     *
     * @param {String} type  The event type to invoke
     * @param {Any} [evt]  Any value (object is recommended and powerful), passed to each handler
     * @memberOf mitt
     */
    emit(type: string, evt: any): void;
};
export {};
