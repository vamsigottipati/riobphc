"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var Flipping_1 = require("../Flipping");
function styleVars(element, valueMap, prefix) {
    if (prefix === void 0) { prefix = 'flip'; }
    Object.keys(valueMap).forEach(function (property) {
        var value = valueMap[property];
        if (value === undefined || !element) {
            return;
        }
        element.style.setProperty("--" + prefix + "-" + property, "" + valueMap[property]);
    });
}
var flipStyle = function (attr) { return "\n[" + attr + "] {\n  transition-property: transform;\n  transition-duration: calc(var(--flip-active, 1) * 0.6s);\n  transform-origin: top left;\n  transform:\n    translateX(calc(var(--flip-dx, 0) * 1px))\n    translateY(calc(var(--flip-dy, 0) * 1px))\n    scale(var(--flip-dw, 1), var(--flip-dh, 1));\n}\n"; };
var matrixRegex = /matrix\(.*, .*, .*, .*, (.*), (.*)\)/;
var FlippingCSS = /** @class */ (function (_super) {
    __extends(FlippingCSS, _super);
    function FlippingCSS() {
        var _this = _super.call(this, {
            onFlip: function (stateMap) {
                Object.keys(stateMap).forEach(function (key) {
                    var state = stateMap[key];
                    if (state.delta) {
                        var tx = 0;
                        var ty = 0;
                        if (state.bounds && state.bounds.transform) {
                            var match = state.bounds.transform.match(matrixRegex);
                            if (match && match.length === 3) {
                                tx = parseFloat(match[1]);
                                ty = parseFloat(match[2]);
                            }
                        }
                        styleVars(state.element, __assign({ dx: state.delta.left + tx, dy: state.delta.top + ty, dw: state.delta.width, dh: state.delta.height }, (state.data && state.data.noScale
                            ? { dw: 1, dh: 1 }
                            : undefined), { active: 0 }));
                    }
                });
                requestAnimationFrame(function () {
                    requestAnimationFrame(function () {
                        Object.keys(stateMap).forEach(function (key) {
                            var state = stateMap[key];
                            if (state.bounds) {
                                styleVars(state.element, {
                                    dx: 0,
                                    dy: 0,
                                    dw: 1,
                                    dh: 1,
                                    active: 1
                                });
                            }
                        });
                    });
                });
            }
        }) || this;
        _this.injectStyle();
        return _this;
    }
    FlippingCSS.prototype.injectStyle = function () {
        var styleEl = document.createElement('style');
        styleEl.innerHTML = flipStyle(this.attribute);
        document.querySelector('head').appendChild(styleEl);
    };
    return FlippingCSS;
}(Flipping_1.default));
module.exports = FlippingCSS;
