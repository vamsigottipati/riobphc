"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
function mirrorPlugin(states, event) {
    if (event !== 'flip') {
        return states;
    }
    var nextStates = {};
    Object.keys(states).forEach(function (key) {
        var state = states[key];
        var element = state.element || (state.previous && state.previous.element);
        if (element) {
            // const mirrorKey = element.getAttribute('data-flip-mirror');
            if (element.hasAttribute('data-flip-follow')) {
                var followKey = element.getAttribute('data-flip-follow');
                if (followKey && states[followKey]) {
                    nextStates[key] = __assign({}, state, { delta: __assign({ left: 0, top: 0 }, states[followKey].delta, { width: 1, height: 1 }) });
                }
                else if (state.type === 'ENTER' || state.type === 'LEAVE') {
                    var candidateElement = element.nextElementSibling;
                    while (candidateElement &&
                        (!candidateElement.hasAttribute('data-flip-key') ||
                            states[candidateElement.getAttribute('data-flip-key')].type !==
                                'MOVE')) {
                        candidateElement = candidateElement.nextElementSibling;
                    }
                    if (candidateElement) {
                        var candidateDelta = states[candidateElement.getAttribute('data-flip-key')].delta;
                        nextStates[key] = __assign({}, state, { delta: {
                                left: candidateDelta.left,
                                top: candidateDelta.top,
                                width: 1,
                                height: 1
                            } });
                    }
                }
            }
        }
    });
    return Object.assign(states, nextStates);
}
exports.default = mirrorPlugin;
