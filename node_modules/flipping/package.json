{
  "_from": "flipping@latest",
  "_id": "flipping@1.1.0",
  "_inBundle": false,
  "_integrity": "sha512-aG+TldohfRa6t5fwD2SHvtV193lDrEbHIFOzfYogzJzjxLaFpoek39S7rsIAmE3KKVM84I24J2Z50PsPqTrldA==",
  "_location": "/flipping",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "flipping",
    "fetchSpec": "latest",
    "name": "flipping",
    "raw": "flipping@latest",
    "rawSpec": "latest",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/flipping/-/flipping-1.1.0.tgz",
  "_shasum": "0bce7bc7e9868860527db1103aa924d3f0562fd6",
  "_shrinkwrap": null,
  "_spec": "flipping@latest",
  "_where": "/Users/vamsikrishna/Documents/unclebob/rio",
  "author": {
    "email": "davidkpiano@gmail.com",
    "name": "David"
  },
  "bugs": {
    "url": "https://github.com/davidkpiano/flipping/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "rematrix": "^0.1.3"
  },
  "deprecated": false,
  "description": "Flipping awesome animations.",
  "devDependencies": {
    "@types/gsap": "^1.19.2",
    "@types/jsdom": "^11.0.6",
    "@types/mocha": "^5.2.4",
    "@types/web-animations-js": "^2.2.6",
    "awesome-typescript-loader": "^3.5.0",
    "babel-core": "^6.26.3",
    "chai": "^3.5.0",
    "gsap": "^1.20.6",
    "jsdom": "^11.11.0",
    "jsdom-global": "^3.0.2",
    "mocha": "^3.5.3",
    "node-sass": "^4.9.2",
    "prettier": "^1.13.7",
    "ts-loader": "^2.3.7",
    "ts-node": "^3.3.0",
    "tslint": "^5.10.0",
    "typescript": "^2.9.2",
    "webpack": "^2.7.0"
  },
  "homepage": "https://github.com/davidkpiano/flipping#readme",
  "keywords": [
    "animation",
    "flip",
    "transition"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "flipping",
  "optionalDependencies": {},
  "readme": "# Flipping\n\nA library (and collection of adapters) for [implementing FLIP transitions](https://css-tricks.com/animating-layouts-with-the-flip-technique/).\n\nFor more information about the FLIP technique, view the flipping slides:\n- [CSS Dev Conf 2017](https://slides.com/davidkhourshid/flipping)\n- [CSSConf AU 2018](https://slides.com/davidkhourshid/illusions)\n\n## Examples\n- https://codepen.io/davidkpiano/pen/xLKBpM\n- https://codepen.io/davidkpiano/pen/vmXErw\n- https://codepen.io/davidkpiano/pen/xPVJwm\n- https://codepen.io/davidkpiano/pen/RjaBpW\n- https://codepen.io/davidkpiano/pen/zWrRye\n\n## Installation\n```\nnpm install flipping@latest --save\n```\n\nOr grab the files directly:\n- https://unpkg.com/flipping@latest/dist/flipping.js (core)\n- https://unpkg.com/flipping@latest/dist/flipping.web.js (WAAPI adapter)\n- ðŸ”œ https://unpkg.com/flipping@latest/dist/flipping.css.js (CSS adapter - WIP!)\n\n## Quick Start\n\nIn your HTML, add the `data-flip-key=\"...\"` attribute to shared elements (see HTML example below).\n\n```js\nimport Flipping from 'flipping';\n\nconst flipping = new Flipping();\n\n// Before a layout change happens\nflipping.read();\n\n// Any effect that changes the layout\ndoSomething(); \n\n// After a layout change happens\n// With an adapter, this will start the FLIP animation\nflipping.flip();\n```\n\n```html\n<!-- first view -->\n<section class=\"gallery\">\n  <div class=\"photo-1\" data-flip-key=\"photo-1\">\n    <img src=\"/photo-1\"/>\n  </div>\n  <div class=\"photo-2\" data-flip-key=\"photo-2\">\n    <img src=\"/photo-2\"/>\n  </div>\n  <div class=\"photo-3\" data-flip-key=\"photo-3\">\n    <img src=\"/photo-3\"/>\n  </div>\n</section>\n\n<!-- second view -->\n<section class=\"details\">\n  <div class=\"photo\" data-flip-key=\"photo-1\">\n    <img src=\"/photo-1\"/>\n  </div>\n  <p class=\"description\">\n    Lorem ipsum dolor sit amet...\n  </p>\n</section>\n```\n\n## API\n\n### `new Flipping(options?)`\n\nCreates a new `Flipping` instance. This is the thing that keeps track of all the changes made, and determines if any elements changed positions or size.\n\n**Parameters for `options`**\n\nFor greater control and custom animations, you can pass in the following parameters (all optional):\n\n-  `selector?: (parent: Element) => Element[];` - Selects all \"flippable\" elements. Defaults to all elements that have a `[data-flip-key]` attribute.\n-  `activeSelector: (element) => Element[];` - Selects the currently active \"flippable\" elements. Defaults to selecting the visible flippable elements.\n-  `onFlip?: (state: IFlipStateMap) => void;` - Event listener. Called with the entire state map of tracked flippable elements whenever `.flip()` is called.\n-  `onRead?: (state: IFlipStateMap) => void;` - Event listener. Called with the entire state map of tracked flippable elements whenever `.read()` is called.\n-  `onEnter?: (state: IFlipStateMap) => void;` - Event listener. Called with the state map of elements that enter (that is, not previously tracked).\n-  `onLeave?: (state: IFlipStateMap) => void;` - Event listener. Called with the state map of elements that leave (that is, previously tracked but no longer active).\n-  `parent?: Element;` - The root element to query all flippable elements. Defaults to the `<body>`.\n-  `plugins?: FlipPlugin[];` - An array of plugins that transform the state map before being emitted.\n\n### `flipping.read(): void`\n\nQueries all the flippable selectors and reads their bounds (position and size). This must be called before layout cahnges are made.\n\nWill call any `onRead()` event listeners with the entire state map.\n\n### `flipping.flip(): void`\n\nQueries all the flippable selectors and reads their bounds (position and size), and then determines the deltas (changes in position and/or size)\n\nWill call any `onFlip()` event listeners with the entire state map.\n\n### `flipping.wrap(fn): void`\n\n1. Calls `flipping.read()`\n2. Calls the wrapped `fn()`\n3. Returns the result of the wrapped `fn()`\n4. Calls `flipping.flip()`\n\nIt's a nice shorthand. Use it.\n\n### `data-flip-key=\"...\"`\n\nHTML data-attribute that tracks the same/shared elements and identifies them as the \"same\" element.\n\n### `data-flip-no-scale`\n\nHTML data-attribute that prevents the Flipping adapters from trying to apply `scale()` to a transformed element.\n\n- https://codepen.io/davidkpiano/pen/RjaBpW\n- https://codepen.io/davidkpiano/pen/xLKBpM\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/davidkpiano/flipping.git"
  },
  "scripts": {
    "build": "npm run build:prod",
    "build:prod": "tsc && webpack --config webpack.config.prod.js",
    "build:watch": "webpack --config webpack.config.js -w",
    "examples": "npm start & node-sass -w examples/scss -o examples/css",
    "prepublish": "npm run build:prod",
    "start": "npm run build:watch",
    "test": "NODE_ENV=test && mocha -r ts-node/register test/**.test.ts"
  },
  "types": "lib/index.d.ts",
  "version": "1.1.0"
}
